/*
 * Copyright 2023 Pavlo Stavytskyi
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.morfly.pendant.starlark.lang

import io.morfly.pendant.starlark.lang.BracketsKind.Curly
import io.morfly.pendant.starlark.lang.BracketsKind.Round
import io.morfly.pendant.starlark.lang.ReturnKind.Type
import kotlin.annotation.AnnotationRetention.RUNTIME
import kotlin.annotation.AnnotationTarget.CLASS
import kotlin.annotation.AnnotationTarget.PROPERTY

/**
 * Default value for string arguments of annotations for library generation.
 */
const val PENDANT_ARGUMENT_DEFAULT = "<default>"

/**
 * For every interface annotated with [LibraryFunction] a corresponding Kotlin DSL function will be generated where all
 * properties of the interface will be taken as function parameters.
 */
@Retention(RUNTIME)
@Target(CLASS)
annotation class LibraryFunction(
    /**
     * Name of a generated function both in Kotlin DSL and in Starlark.
     */
    val name: String,
    /**
     * Configure in what types of files the Kotlin DSL function could be used. Use [FunctionScope.Build],
     * [FunctionScope.Workspace] or [FunctionScope.Starlark] for .bzl files.
     */
    val scope: Array<FunctionScope>,
    /**
     * Configure if the Kotlin DSL function generates a Starlark function call as [FunctionKind.Statement] or as
     * [FunctionKind.Expression].
     */
    val kind: FunctionKind,
    /**
     * Optional. Configure what kind of Kotlin DSL functions will be generated. Either with [BracketsKind.Round] (),
     * [BracketsKind.Curly] {} or both.
     */
    val brackets: Array<BracketsKind> = [Round, Curly],
)

/**
 * Allows specifying additional information about arguments of a function generated with [LibraryFunction].
 */
@Retention(RUNTIME)
@Target(PROPERTY)
annotation class Argument(
    /**
     * Optional. Name of the generated Starlark function call.
     */
    val name: String = PENDANT_ARGUMENT_DEFAULT,
    /**
     * Optional. Configure if the argument mandatory in the generated Kotlin DSL.
     */
    val required: Boolean = false,
    /**
     * Optional. Configure an argument of ListType to be a vararg in Kotlin DSL. Throws compilation error for other
     * types.
     */
    val variadic: Boolean = false,
    val implicit: Boolean = false,
)

/**
 * Denotes a return type of generated Kotlin DSL function.
 * When a property is annotated, its type is considered as a return type while the name is ignore.
 */
@Retention(RUNTIME)
@Target(PROPERTY)
annotation class Returns(
    /**
     * Optional. Configure if the function in Kotlin DSL has an explicit return type or if it is derived dynamically with type inference
     */
    val kind: ReturnKind = Type
)

/**
 * Function type defines the behavior of Starlark template engine when generating code for the function.
 */
enum class FunctionKind {

    /**
     * Function is used as a statement. Instantly generates corresponding Starlark code right after the function call
     * was found in the abstract syntax tree (AST), generated by DSL.
     * As an example, this type is applicable for Bazel rules.
     */
    Statement,

    /**
     * Function is used as an expression with a specified return type. Defers Starlark code generation for this particular
     * function until it happens for the element in AST that uses this expression.
     * As an example, this type is applicable for library functions such as 'glob'.
     */
    Expression
}

enum class BracketsKind {
    Round,
    Curly
}

/**
 * Defines scopes related to different types of files that use Starlark language.
 */
enum class FunctionScope {

    /**
     * Corresponds to regular *.star or *.bzl Starlark files.
     */
    Starlark,

    /**
     * Corresponds to Bazel WORKSPACE files.
     */
    Workspace,

    /**
     * Corresponds to Bazel BUILD files.
     */
    Build
}

enum class ReturnKind {

    /**
     * Takes type of the annotated property as a return type of the generated function.
     * Name of the annotated property is ignored.
     */
    Type,

    /**
     * Return type of the generated function is defined dynamically and depends on the type expected by the consumer.
     * Name and type of the annotated property are ignored.
     */
    Dynamic
}